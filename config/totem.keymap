//
//                                                        ▀▀▀▀▀     ▀▀▀▀▀          ▀▀█▀▀
//                                                        ▄▀▀▀▄  ▄  ▄▀▀▀▄  ▄  ▄▀▀▀▄  █  ▄▀▀▀▄
//                                                        █   █  █  █   █  █  █   █  █  █   █
//                                                         ▀▀▀   █   ▀▀▀   █   ▀▀▀   ▀   ▀▀▀
//                                                               █      ▄▄▄█▄▄▄    █   █  
//                                                               ▀      █  █  █     █▄█
//                                                             ▀▀▀▀▀    █  █  █      ▀
//                                                                      ▀  ▀  ▀
//
// ▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄

#include "totem_labels.h"
#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>

// define keys for home row mods

#define KEYS_L LT0 LT1 LT2 LT3 LT4 LM0 LM1 LM2 LM3 LM4 LB0 LB1 LB2 LB3 LB4
#define KEYS_R RT0 RT1 RT2 RT3 RT4 RM0 RM1 RM2 RM3 RM4 RB0 RB1 RB2 RB3 RB4
#define THUMBS LH2 LH1 LH0 RH0 RH1 RH2

&mt {
    quick-tap-ms = <100>;
    global-quick-tap;
    flavor = "tap-preferred";
    tapping-term-ms = <170>;
};

/ {
    behaviors {
        hml: home_row_mod_left {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "balanced";
            require-prior-idle-ms = <150>;
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            bindings = <&kp>, <&kp>;

            hold-trigger-key-positions = < KEYS_L THUMBS >; // List of keys on the right side of the keyboard
            hold-trigger-on-release;
        };

        hmr: home_row_mod_right {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "balanced";
            require-prior-idle-ms = <150>;
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            bindings = <&kp>, <&kp>;

            hold-trigger-key-positions = < KEYS_R THUMBS >; // List of keys on the left side of the keyboard
            hold-trigger-on-release;
        };

        game_mode: game_mode {
            compatible = "zmk,behavior-tap-dance";
            label = "GAME_MODE";
            #binding-cells = <0>;
            bindings = <&to 0>, <&to 5>;
        };

        art_mode: art_mode {
            compatible = "zmk,behavior-tap-dance";
            label = "ART_MODE";
            #binding-cells = <0>;
            bindings = <&to 0>, <&to 7>, <&to 2>;
        };

        hold_sticky: hold_sticky {
            compatible = "zmk,behavior-hold-tap";
            label = "HOLD_STICKY";
            bindings = <&kp>, <&sk>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
        };

        magic_shift: magic_shift {
            compatible = "zmk,behavior-tap-dance";
            label = "MAGIC_SHIFT";
            #binding-cells = <0>;
            bindings = <&hold_sticky LSHIFT LSHIFT>, <&caps_word>;
        };
    };

    combos {
        compatible = "zmk,combos";

        combo_esc {
            timeout-ms = <50>;
            key-positions = <1 2>;
            bindings = <&kp ESC>;
        };

        Enter {
            bindings = <&kp ENTER>;
            key-positions = <34 35>;
        };

        tilde {
            bindings = <&kp TILDE>;
            key-positions = <0 1>;
        };

        backspace {
            bindings = <&kp BACKSPACE>;
            key-positions = <7 8>;
        };

        numpad {
            bindings = <&tog 2>;
            key-positions = <5 4>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        base_layer {
            label = "BASE";
            bindings = <
           &kp B            &kp F            &kp L         &kp K              &kp Q          &kp P        &kp G               &kp O         &kp U             &kp DOT
           &hml LEFT_WIN N  &hml LEFT_ALT S  &hmr LCTRL H  &hml LEFT_SHIFT T  &kp M          &kp Y        &hmr RIGHT_SHIFT C  &hmr RCTRL A  &hmr RIGHT_ALT E  &hmr RIGHT_WIN I
&art_mode  &kp X            &kp V            &kp J         &kp D              &kp Z          &kp APOS     &kp W               &kp FSLH      &kp SEMI          &kp COMMA         &game_mode
                                             &lt 4 TAB     &kp R              &lt 3 SPACE    &lt 1 SPACE  &magic_shift        &kp DELETE
            >;
        };

        num_layer {
            label = "NUM";
            bindings = <
        &kp N1    &kp N2    &kp N3     &kp N4     &kp N5     &kp N6   &kp N7     &kp N8     &kp N9    &kp N0
        &kp LGUI  &kp LALT  &kp LCTRL  &kp LSHFT  &kp F11    &kp F12  &kp RSHFT  &kp RCTRL  &kp RALT  &kp RGUI
&trans  &kp F1    &kp F2    &kp F3     &kp F4     &kp F5     &kp F6   &kp F7     &kp F8     &kp F9    &kp F10   &trans
                            &trans     &trans     &trans     &trans   &trans     &trans
            >;
        };

        num_Pad {
            bindings = <
        &trans  &trans  &trans  &trans  &trans    &trans  &kp KP_N7  &kp KP_N8  &kp KP_N9  &kp KP_NUM
        &trans  &trans  &trans  &trans  &trans    &trans  &kp KP_N4  &kp KP_N5  &kp KP_N6  &kp MINUS
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &kp KP_N1  &kp KP_N2  &kp KP_N3  &kp PLUS    &trans
                        &trans  &trans  &trans    &trans  &kp KP_N0  &kp DOT
            >;

            label = "NUM-PAD";
        };

        sim_layer {
            label = "SYM";
            bindings = <
        &kp EXCLAMATION  &kp AT            &kp HASH               &kp DOLLAR            &kp PERCENT    &kp CARET         &kp PLUS               &kp ASTRK               &kp AMPERSAND      &kp COLON
        &trans           &kp LEFT_BRACKET  &hml LCTRL LEFT_BRACE  &hml LEFT_SHIFT LPAR  &kp LT         &kp GREATER_THAN  &hmr RIGHT_SHIFT RPAR  &hmr RCTRL RIGHT_BRACE  &kp RIGHT_BRACKET  &kp SEMICOLON
&trans  &trans           &kp GRAVE         &kp BSLH               &kp EQUAL             &kp TILDE      &kp UNDER         &kp MINUS              &kp FSLH                &kp PIPE           &kp QUESTION   &trans
                                           &trans                 &mo 1                 &trans         &trans            &kp BSPC               &trans
            >;
        };

        nav_layer {
            bindings = <
        &trans               &trans     &kp LS(LC(C))  &kp LS(LC(V))  &trans    &trans  &kp HOME  &kp PG_DN  &kp PG_UP  &kp END
        &mt LEFT_WIN ESCAPE  &kp LALT   &kp LCTRL      &kp LSHFT      &trans    &trans  &kp LEFT  &kp DOWN   &kp UP     &kp RIGHT
&trans  &kp LC(Z)            &kp LC(X)  &kp LC(C)      &kp LC(V)      &trans    &trans  &trans    &trans     &trans     &trans     &trans
                                        &trans         &trans         &trans    &trans  &trans    &trans
            >;

            label = "NAV";
        };

        game_layer {
            bindings = <
        &kp TAB    &kp Q  &kp W  &kp E  &kp R        &trans     &trans     &trans  &trans  &trans
        &kp LSHFT  &kp A  &kp S  &kp D  &kp F        &kp G      &trans     &trans  &trans  &trans
&trans  &kp LCTRL  &kp Z  &kp X  &kp C  &kp V        &trans     &trans     &trans  &trans  &trans  &trans
                          &kp M  &mo 6  &kp SPACE    &kp SPACE  &kp RCTRL  &trans
            >;

            label = "GAME";
        };

        game_num {
            bindings = <
        &trans    &kp N1  &kp N2  &kp N3  &kp T     &trans  &trans  &trans  &trans  &trans
        &trans    &kp N4  &kp N5  &kp N6  &kp G     &trans  &trans  &trans  &trans  &trans
&trans  &kp LALT  &kp F1  &kp F2  &kp F3  &kp B     &trans  &trans  &trans  &trans  &trans  &trans
                          &trans  &trans  &trans    &trans  &trans  &trans
            >;

            label = "GAME-NUM";
        };

        art_layer {
            bindings = <
        &kp LC(S)      &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans
        &kp LC(LS(S))  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans
&trans  &trans         &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
                               &trans  &trans  &trans    &trans  &trans  &trans
            >;

            label = "ART";
        };
    };
};
